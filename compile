#!/bin/bash
# This script is implemented using Bash
# You are free to change the language used for this script,
# but do *not* change its name.

helpFunction()
{
   echo ""
   echo "Usage: $0 [options] <target.wacc>"
   echo -e "\tDefault config: ./compile <target.wacc> will check both the syntax and semantics of the file"
   echo -e "\toptions:"
   echo -e "\t\t-p: --parse_only. Check only for syntax errors and generate an AST."
   echo -e "\t\t-t: --print_ast. Display AST generated by the parser."
   echo -e "\t\t-o [Level]: --optimize. Optimize the code using given level. Default is level 5. (Currently unavailable)"
   echo -e "\t\t-a: --print asm. Display ARM assembly code. (Currently unavailable)"
   echo -e "\t\t-x: --execute. Assemble and Execute the given wacc file. (Currently unavailable)"
   echo -e "\t\t-h: --help. Show this message"
   exit 1
}

while getopts "pto:axhi" opt
do
   case $opt in
      p ) PARSE_ONLY="--parse_only" ;;
      t ) PRINT_AST="--print_ast" ;;
      o ) OPTIMISE="--optimise $OPTARG" ;;
      a ) ASSEMBLY="--assembly" ;;
      i ) INTEL="--intel" ;;
      x ) EXECUTE="--execute" ;;
      h ) helpFunction ;;
      ? ) helpFunction ;; # Print helpFunction in case parameter is non-existent
   esac
done

shift $(($OPTIND - 1))
if [ -z $1 ]
then
    echo "No file/path has been supplied!";
    helpFunction
fi

# compile the given wacc file here
# default as using -o1 optimise and generate assembly
java -cp ./bin:./lib/antlr-4.9.1-complete.jar Compiler $1 $PARSE_ONLY $PRINT_AST $OPTIMISE "--optimise" "1" "--assembly" $EXECUTE $INTEL
